
使用promise机制的优点如下：

1.可以对函数进行链式调用，所以你不会陷入代码缩进噩梦中；

2.在调用链的过程中，可以保证上一个函数调用完成之后才会调用下一个函数；

3.每一个then()调用都带有两个参数（两个都是函数）。第一个是成功之后的回调，第二个是出错之后的处理器；

4.如果调用链中出现了错误，错误将会被冒泡传递到其余的错误处理函数中。所以，最终来说，所有错误都可以在任意一个回调函数中进行处理。

$q 和 Promise
Promise接口是AngularJS组织API的基础，从根本上讲，Promise接口从以下方面对异步请求做了规范：

        a.异步请求返回一个promise，而不是返回具体值；

        b.Promise带有一个then函数，这个函数有两个参数：第一个参数是处理"resolved"和"sucess"事件的函数；第二个参数是处理"rejected"和"failure"事件的函数。调用这两个函数时将会把结果或者拒绝的原因作为参数传递进去；

        c.只要返回结果是合法的，接口就可以保证这两个函数中的一个会被调用。

        大多数deferred/Q实现都会遵守以上方式，但是AngularJS的实现比较特殊，原因如下：

        a.AngularJS知道$q的存在，所以$q会被整合到作用域模型中去。这样可以使解析时的传递速度更快，并且可以减少UI的闪烁和刷新；

        b.AngularJS的模板也认识$q，这样一来，接口的内容就可以被当作最终结果值（而不是当作promise）来对待，然后等获取结果之后再通知promise；

        c.体积更小，因为对于常用的异步任务来说，AngularJS只实现了它们所需要的最基本、最重要的功能。


var defered = $q.defer();

defered.resolve(value);
defered.reject(reason)
defered.notify(value)

