
from: http://docs.ngnice.com/guide/directive

1、指令就是一些附加在HTML元素上的自定义标记（例如：属性，元素，或css类），它告诉AngularJS的HTML编译器 ($compile) 在元素上附加某些指定的行为，甚至操作DOM、改变DOM元素，以及它的各级子节点。

2、当Angular 启动器引导(bootstrap)你的应用程序时， HTML编译器($compile)就会遍历整个DOM，以匹配DOM元素里的指令。

3、指令的匹配：
	Angular 把一个元素的标签和属性名字进行规范化。
	规范化的过程：
		a、从元素或属性的名字前去掉 x- and data-
		b、从 :、-、_ 分隔的形式转换成小驼峰命名法。(camelCase)

4、最佳实践: 建议使用破折号分隔符的方式(比如ng-bind for ngBind). 如果你想支持HTML验证工具，你可以加前缀data.(比如把ngBind写成data-ng-bind). 其它的形式虽然也是合法的，但都是因为历史遗留原因而支持的，我们建议不要那么用。

5、$compile(编译) 可以基于元素名字、属性、类名和注释来匹配指令的。Angular提供的所有指令都支持元素名、属性、类名和注释的形式。

6、
	最佳实践: 最好通过标签名和属性来使用指令而不要通过注释和类名。这样做可以更容易地看出一个元素是跟哪个指令匹配的。
	最佳实践: 通常注释式命名式指令使用在如下情景：某些指令需要跨越多个元素，但是受DOM API的限制，无法跨越多个元素(比如<table>元素)。 AngularJS 1.2 引入了ng-repeat-start和ng-repeat-end指令，作为更好的解决方案。 建议开发者使用这种方式，而不要用“自定义注释”形式的指令。

7、创建指令：
	module.directive 接受规范化normalized 的指令名字和工厂方法。此工厂方法应该返回一个带有不同选项的对象来告诉编译器 $compile 此指令被匹配上该做些什么。

	工厂函数仅在 编译器 第一次匹配到指令的时候调用一次。
	最佳实践: 尽量返回一个对象，而不要只返回一个函数。

8、