#!/usr/bin/env node

var fs = require('fs');
var exists = fs.existsSync;
var logger = require('./logger');
var myth = require('..');
var program = require('commander');
var read = require('read-file-stdin');
var watch = require('node-watch');
var write = require('write-file-stdout');

/**
 * Usage.
 */

program
  .version(require('../package.json').version)
  .usage('[<input>] [<output>]')
  .option('-w, --watch', 'watch the input file')
  .option('-v, --verbose', 'log verbose output');

/**
 * Examples.
 */

program.on('--help', function () {
  console.log('  Examples:');
  console.log();
  console.log('    # pass an input and output file');
  console.log('    $ myth input.css output.css');
  console.log();
  console.log('    # watch for changes');
  console.log('    $ myth --watch input.css output.css');
  console.log();
  console.log('    # stdin and stdout');
  console.log('    $ cat input.css | myth | grep background-color');
  console.log();
});

/**
 * Parse.
 */

program.parse(process.argv);

/**
 * Settings.
 */

var input = program.args[0];
var output = program.args[1];
var verbose = program.verbose;
var regen = program.watch && input && output;

/**
 * Exists?
 */

if (input && !exists(input)) logger.fatal('not found', input);

/**
 * Run.
 */

run();

/**
 * Watch?
 */

if (regen) {
  watch(input, run);
  if (verbose) logger.info('watch', input);
}

/**
 * Run for the given input and output.
 */

function run () {
  read(input, function (err, buffer) {
    if (err) logger.fatal('error', err.message);
    write(output, myth(buffer.toString()));
    if (verbose && output) logger.info('generate', output);
  });
}